// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: ProccesingDatabase/processingdatabase.proto
// </auto-generated>
#pragma warning disable 0414, 1591, 8981, 0612
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Dressy.ProcessingDatabase {
  /// <summary>
  ///		'Records' table			
  /// </summary>
  public static partial class ProcessingDatabaseRecords
  {
    static readonly string __ServiceName = "Dressy.ProcessingDatabase.ProcessingDatabaseRecords";

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Dressy.ProcessingDatabase.InsertRecordsRequest> __Marshaller_Dressy_ProcessingDatabase_InsertRecordsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Dressy.ProcessingDatabase.InsertRecordsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Dressy.ProcessingDatabase.InsertRecordsResponse> __Marshaller_Dressy_ProcessingDatabase_InsertRecordsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Dressy.ProcessingDatabase.InsertRecordsResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Dressy.FileExchange.FileData> __Marshaller_Dressy_FileExchange_FileData = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Dressy.FileExchange.FileData.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Dressy.FileExchange.UploadStatus> __Marshaller_Dressy_FileExchange_UploadStatus = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Dressy.FileExchange.UploadStatus.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Dressy.ProcessingDatabase.GetRecordsByStatusRequest> __Marshaller_Dressy_ProcessingDatabase_GetRecordsByStatusRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Dressy.ProcessingDatabase.GetRecordsByStatusRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Dressy.ProcessingDatabase.GetRecordsByStatusResponse> __Marshaller_Dressy_ProcessingDatabase_GetRecordsByStatusResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Dressy.ProcessingDatabase.GetRecordsByStatusResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Dressy.ProcessingDatabase.GetEmbeddingsByStatusRequest> __Marshaller_Dressy_ProcessingDatabase_GetEmbeddingsByStatusRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Dressy.ProcessingDatabase.GetEmbeddingsByStatusRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Dressy.ProcessingDatabase.GetEmbeddingsByStatusResponse> __Marshaller_Dressy_ProcessingDatabase_GetEmbeddingsByStatusResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Dressy.ProcessingDatabase.GetEmbeddingsByStatusResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Dressy.ProcessingDatabase.GetRecordByIdRequest> __Marshaller_Dressy_ProcessingDatabase_GetRecordByIdRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Dressy.ProcessingDatabase.GetRecordByIdRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Dressy.ProcessingDatabase.GetRecordByIdResponse> __Marshaller_Dressy_ProcessingDatabase_GetRecordByIdResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Dressy.ProcessingDatabase.GetRecordByIdResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Dressy.ProcessingDatabase.UpdateRecordByIdRequest> __Marshaller_Dressy_ProcessingDatabase_UpdateRecordByIdRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Dressy.ProcessingDatabase.UpdateRecordByIdRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Dressy.ProcessingDatabase.UpdateRecordByIdResponse> __Marshaller_Dressy_ProcessingDatabase_UpdateRecordByIdResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Dressy.ProcessingDatabase.UpdateRecordByIdResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Dressy.ProcessingDatabase.AuthenticationRequest> __Marshaller_Dressy_ProcessingDatabase_AuthenticationRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Dressy.ProcessingDatabase.AuthenticationRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Dressy.ProcessingDatabase.AuthenticationResponse> __Marshaller_Dressy_ProcessingDatabase_AuthenticationResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Dressy.ProcessingDatabase.AuthenticationResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Dressy.ProcessingDatabase.ClearTableRequest> __Marshaller_Dressy_ProcessingDatabase_ClearTableRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Dressy.ProcessingDatabase.ClearTableRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Dressy.ProcessingDatabase.ClearTableResponse> __Marshaller_Dressy_ProcessingDatabase_ClearTableResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Dressy.ProcessingDatabase.ClearTableResponse.Parser));

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Dressy.ProcessingDatabase.InsertRecordsRequest, global::Dressy.ProcessingDatabase.InsertRecordsResponse> __Method_InsertRecords = new grpc::Method<global::Dressy.ProcessingDatabase.InsertRecordsRequest, global::Dressy.ProcessingDatabase.InsertRecordsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "InsertRecords",
        __Marshaller_Dressy_ProcessingDatabase_InsertRecordsRequest,
        __Marshaller_Dressy_ProcessingDatabase_InsertRecordsResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Dressy.FileExchange.FileData, global::Dressy.FileExchange.UploadStatus> __Method_ImportCsv = new grpc::Method<global::Dressy.FileExchange.FileData, global::Dressy.FileExchange.UploadStatus>(
        grpc::MethodType.ClientStreaming,
        __ServiceName,
        "ImportCsv",
        __Marshaller_Dressy_FileExchange_FileData,
        __Marshaller_Dressy_FileExchange_UploadStatus);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Dressy.ProcessingDatabase.GetRecordsByStatusRequest, global::Dressy.ProcessingDatabase.GetRecordsByStatusResponse> __Method_GetRecordsByStatus = new grpc::Method<global::Dressy.ProcessingDatabase.GetRecordsByStatusRequest, global::Dressy.ProcessingDatabase.GetRecordsByStatusResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetRecordsByStatus",
        __Marshaller_Dressy_ProcessingDatabase_GetRecordsByStatusRequest,
        __Marshaller_Dressy_ProcessingDatabase_GetRecordsByStatusResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Dressy.ProcessingDatabase.GetEmbeddingsByStatusRequest, global::Dressy.ProcessingDatabase.GetEmbeddingsByStatusResponse> __Method_GetEmbeddingsByStatus = new grpc::Method<global::Dressy.ProcessingDatabase.GetEmbeddingsByStatusRequest, global::Dressy.ProcessingDatabase.GetEmbeddingsByStatusResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetEmbeddingsByStatus",
        __Marshaller_Dressy_ProcessingDatabase_GetEmbeddingsByStatusRequest,
        __Marshaller_Dressy_ProcessingDatabase_GetEmbeddingsByStatusResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Dressy.ProcessingDatabase.GetRecordByIdRequest, global::Dressy.ProcessingDatabase.GetRecordByIdResponse> __Method_GetRecordById = new grpc::Method<global::Dressy.ProcessingDatabase.GetRecordByIdRequest, global::Dressy.ProcessingDatabase.GetRecordByIdResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetRecordById",
        __Marshaller_Dressy_ProcessingDatabase_GetRecordByIdRequest,
        __Marshaller_Dressy_ProcessingDatabase_GetRecordByIdResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Dressy.ProcessingDatabase.UpdateRecordByIdRequest, global::Dressy.ProcessingDatabase.UpdateRecordByIdResponse> __Method_UpdateRecordById = new grpc::Method<global::Dressy.ProcessingDatabase.UpdateRecordByIdRequest, global::Dressy.ProcessingDatabase.UpdateRecordByIdResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateRecordById",
        __Marshaller_Dressy_ProcessingDatabase_UpdateRecordByIdRequest,
        __Marshaller_Dressy_ProcessingDatabase_UpdateRecordByIdResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Dressy.ProcessingDatabase.AuthenticationRequest, global::Dressy.ProcessingDatabase.AuthenticationResponse> __Method_Authentication = new grpc::Method<global::Dressy.ProcessingDatabase.AuthenticationRequest, global::Dressy.ProcessingDatabase.AuthenticationResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Authentication",
        __Marshaller_Dressy_ProcessingDatabase_AuthenticationRequest,
        __Marshaller_Dressy_ProcessingDatabase_AuthenticationResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Dressy.ProcessingDatabase.ClearTableRequest, global::Dressy.ProcessingDatabase.ClearTableResponse> __Method_ClearTable = new grpc::Method<global::Dressy.ProcessingDatabase.ClearTableRequest, global::Dressy.ProcessingDatabase.ClearTableResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ClearTable",
        __Marshaller_Dressy_ProcessingDatabase_ClearTableRequest,
        __Marshaller_Dressy_ProcessingDatabase_ClearTableResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Dressy.ProcessingDatabase.ProcessingdatabaseReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of ProcessingDatabaseRecords</summary>
    [grpc::BindServiceMethod(typeof(ProcessingDatabaseRecords), "BindService")]
    public abstract partial class ProcessingDatabaseRecordsBase
    {
      /// <summary>
      /// Inserts data into a table, one at a time, in a batch, or from a csv file
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Dressy.ProcessingDatabase.InsertRecordsResponse> InsertRecords(global::Dressy.ProcessingDatabase.InsertRecordsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Dressy.FileExchange.UploadStatus> ImportCsv(grpc::IAsyncStreamReader<global::Dressy.FileExchange.FileData> requestStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Getting data by status, allowed only for preprocessor and processor
      /// For preprocessor allowed status is only NEW, for processor allowed NEW and PREPROCESSED (depends on processor posibilities) status
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Dressy.ProcessingDatabase.GetRecordsByStatusResponse> GetRecordsByStatus(global::Dressy.ProcessingDatabase.GetRecordsByStatusRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Dressy.ProcessingDatabase.GetEmbeddingsByStatusResponse> GetEmbeddingsByStatus(global::Dressy.ProcessingDatabase.GetEmbeddingsByStatusRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Getting data by Id, use for getting data after search
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Dressy.ProcessingDatabase.GetRecordByIdResponse> GetRecordById(global::Dressy.ProcessingDatabase.GetRecordByIdRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Updating data after preprocessing or processing, status will be updated automatically
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Dressy.ProcessingDatabase.UpdateRecordByIdResponse> UpdateRecordById(global::Dressy.ProcessingDatabase.UpdateRecordByIdRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///   !!!!!FOR TEST ENVIRONMENT ONLY!!!!!! Clearing table 
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Dressy.ProcessingDatabase.AuthenticationResponse> Authentication(global::Dressy.ProcessingDatabase.AuthenticationRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Dressy.ProcessingDatabase.ClearTableResponse> ClearTable(global::Dressy.ProcessingDatabase.ClearTableRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for ProcessingDatabaseRecords</summary>
    public partial class ProcessingDatabaseRecordsClient : grpc::ClientBase<ProcessingDatabaseRecordsClient>
    {
      /// <summary>Creates a new client for ProcessingDatabaseRecords</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public ProcessingDatabaseRecordsClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for ProcessingDatabaseRecords that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public ProcessingDatabaseRecordsClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected ProcessingDatabaseRecordsClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected ProcessingDatabaseRecordsClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// Inserts data into a table, one at a time, in a batch, or from a csv file
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Dressy.ProcessingDatabase.InsertRecordsResponse InsertRecords(global::Dressy.ProcessingDatabase.InsertRecordsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return InsertRecords(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Inserts data into a table, one at a time, in a batch, or from a csv file
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Dressy.ProcessingDatabase.InsertRecordsResponse InsertRecords(global::Dressy.ProcessingDatabase.InsertRecordsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_InsertRecords, null, options, request);
      }
      /// <summary>
      /// Inserts data into a table, one at a time, in a batch, or from a csv file
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Dressy.ProcessingDatabase.InsertRecordsResponse> InsertRecordsAsync(global::Dressy.ProcessingDatabase.InsertRecordsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return InsertRecordsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Inserts data into a table, one at a time, in a batch, or from a csv file
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Dressy.ProcessingDatabase.InsertRecordsResponse> InsertRecordsAsync(global::Dressy.ProcessingDatabase.InsertRecordsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_InsertRecords, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncClientStreamingCall<global::Dressy.FileExchange.FileData, global::Dressy.FileExchange.UploadStatus> ImportCsv(grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ImportCsv(new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncClientStreamingCall<global::Dressy.FileExchange.FileData, global::Dressy.FileExchange.UploadStatus> ImportCsv(grpc::CallOptions options)
      {
        return CallInvoker.AsyncClientStreamingCall(__Method_ImportCsv, null, options);
      }
      /// <summary>
      /// Getting data by status, allowed only for preprocessor and processor
      /// For preprocessor allowed status is only NEW, for processor allowed NEW and PREPROCESSED (depends on processor posibilities) status
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Dressy.ProcessingDatabase.GetRecordsByStatusResponse GetRecordsByStatus(global::Dressy.ProcessingDatabase.GetRecordsByStatusRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetRecordsByStatus(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Getting data by status, allowed only for preprocessor and processor
      /// For preprocessor allowed status is only NEW, for processor allowed NEW and PREPROCESSED (depends on processor posibilities) status
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Dressy.ProcessingDatabase.GetRecordsByStatusResponse GetRecordsByStatus(global::Dressy.ProcessingDatabase.GetRecordsByStatusRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetRecordsByStatus, null, options, request);
      }
      /// <summary>
      /// Getting data by status, allowed only for preprocessor and processor
      /// For preprocessor allowed status is only NEW, for processor allowed NEW and PREPROCESSED (depends on processor posibilities) status
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Dressy.ProcessingDatabase.GetRecordsByStatusResponse> GetRecordsByStatusAsync(global::Dressy.ProcessingDatabase.GetRecordsByStatusRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetRecordsByStatusAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Getting data by status, allowed only for preprocessor and processor
      /// For preprocessor allowed status is only NEW, for processor allowed NEW and PREPROCESSED (depends on processor posibilities) status
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Dressy.ProcessingDatabase.GetRecordsByStatusResponse> GetRecordsByStatusAsync(global::Dressy.ProcessingDatabase.GetRecordsByStatusRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetRecordsByStatus, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Dressy.ProcessingDatabase.GetEmbeddingsByStatusResponse GetEmbeddingsByStatus(global::Dressy.ProcessingDatabase.GetEmbeddingsByStatusRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetEmbeddingsByStatus(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Dressy.ProcessingDatabase.GetEmbeddingsByStatusResponse GetEmbeddingsByStatus(global::Dressy.ProcessingDatabase.GetEmbeddingsByStatusRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetEmbeddingsByStatus, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Dressy.ProcessingDatabase.GetEmbeddingsByStatusResponse> GetEmbeddingsByStatusAsync(global::Dressy.ProcessingDatabase.GetEmbeddingsByStatusRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetEmbeddingsByStatusAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Dressy.ProcessingDatabase.GetEmbeddingsByStatusResponse> GetEmbeddingsByStatusAsync(global::Dressy.ProcessingDatabase.GetEmbeddingsByStatusRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetEmbeddingsByStatus, null, options, request);
      }
      /// <summary>
      /// Getting data by Id, use for getting data after search
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Dressy.ProcessingDatabase.GetRecordByIdResponse GetRecordById(global::Dressy.ProcessingDatabase.GetRecordByIdRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetRecordById(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Getting data by Id, use for getting data after search
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Dressy.ProcessingDatabase.GetRecordByIdResponse GetRecordById(global::Dressy.ProcessingDatabase.GetRecordByIdRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetRecordById, null, options, request);
      }
      /// <summary>
      /// Getting data by Id, use for getting data after search
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Dressy.ProcessingDatabase.GetRecordByIdResponse> GetRecordByIdAsync(global::Dressy.ProcessingDatabase.GetRecordByIdRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetRecordByIdAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Getting data by Id, use for getting data after search
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Dressy.ProcessingDatabase.GetRecordByIdResponse> GetRecordByIdAsync(global::Dressy.ProcessingDatabase.GetRecordByIdRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetRecordById, null, options, request);
      }
      /// <summary>
      /// Updating data after preprocessing or processing, status will be updated automatically
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Dressy.ProcessingDatabase.UpdateRecordByIdResponse UpdateRecordById(global::Dressy.ProcessingDatabase.UpdateRecordByIdRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateRecordById(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Updating data after preprocessing or processing, status will be updated automatically
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Dressy.ProcessingDatabase.UpdateRecordByIdResponse UpdateRecordById(global::Dressy.ProcessingDatabase.UpdateRecordByIdRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateRecordById, null, options, request);
      }
      /// <summary>
      /// Updating data after preprocessing or processing, status will be updated automatically
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Dressy.ProcessingDatabase.UpdateRecordByIdResponse> UpdateRecordByIdAsync(global::Dressy.ProcessingDatabase.UpdateRecordByIdRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateRecordByIdAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Updating data after preprocessing or processing, status will be updated automatically
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Dressy.ProcessingDatabase.UpdateRecordByIdResponse> UpdateRecordByIdAsync(global::Dressy.ProcessingDatabase.UpdateRecordByIdRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateRecordById, null, options, request);
      }
      /// <summary>
      ///   !!!!!FOR TEST ENVIRONMENT ONLY!!!!!! Clearing table 
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Dressy.ProcessingDatabase.AuthenticationResponse Authentication(global::Dressy.ProcessingDatabase.AuthenticationRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Authentication(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///   !!!!!FOR TEST ENVIRONMENT ONLY!!!!!! Clearing table 
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Dressy.ProcessingDatabase.AuthenticationResponse Authentication(global::Dressy.ProcessingDatabase.AuthenticationRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Authentication, null, options, request);
      }
      /// <summary>
      ///   !!!!!FOR TEST ENVIRONMENT ONLY!!!!!! Clearing table 
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Dressy.ProcessingDatabase.AuthenticationResponse> AuthenticationAsync(global::Dressy.ProcessingDatabase.AuthenticationRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AuthenticationAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///   !!!!!FOR TEST ENVIRONMENT ONLY!!!!!! Clearing table 
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Dressy.ProcessingDatabase.AuthenticationResponse> AuthenticationAsync(global::Dressy.ProcessingDatabase.AuthenticationRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Authentication, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Dressy.ProcessingDatabase.ClearTableResponse ClearTable(global::Dressy.ProcessingDatabase.ClearTableRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ClearTable(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Dressy.ProcessingDatabase.ClearTableResponse ClearTable(global::Dressy.ProcessingDatabase.ClearTableRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ClearTable, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Dressy.ProcessingDatabase.ClearTableResponse> ClearTableAsync(global::Dressy.ProcessingDatabase.ClearTableRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ClearTableAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Dressy.ProcessingDatabase.ClearTableResponse> ClearTableAsync(global::Dressy.ProcessingDatabase.ClearTableRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ClearTable, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected override ProcessingDatabaseRecordsClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new ProcessingDatabaseRecordsClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static grpc::ServerServiceDefinition BindService(ProcessingDatabaseRecordsBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_InsertRecords, serviceImpl.InsertRecords)
          .AddMethod(__Method_ImportCsv, serviceImpl.ImportCsv)
          .AddMethod(__Method_GetRecordsByStatus, serviceImpl.GetRecordsByStatus)
          .AddMethod(__Method_GetEmbeddingsByStatus, serviceImpl.GetEmbeddingsByStatus)
          .AddMethod(__Method_GetRecordById, serviceImpl.GetRecordById)
          .AddMethod(__Method_UpdateRecordById, serviceImpl.UpdateRecordById)
          .AddMethod(__Method_Authentication, serviceImpl.Authentication)
          .AddMethod(__Method_ClearTable, serviceImpl.ClearTable).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static void BindService(grpc::ServiceBinderBase serviceBinder, ProcessingDatabaseRecordsBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_InsertRecords, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Dressy.ProcessingDatabase.InsertRecordsRequest, global::Dressy.ProcessingDatabase.InsertRecordsResponse>(serviceImpl.InsertRecords));
      serviceBinder.AddMethod(__Method_ImportCsv, serviceImpl == null ? null : new grpc::ClientStreamingServerMethod<global::Dressy.FileExchange.FileData, global::Dressy.FileExchange.UploadStatus>(serviceImpl.ImportCsv));
      serviceBinder.AddMethod(__Method_GetRecordsByStatus, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Dressy.ProcessingDatabase.GetRecordsByStatusRequest, global::Dressy.ProcessingDatabase.GetRecordsByStatusResponse>(serviceImpl.GetRecordsByStatus));
      serviceBinder.AddMethod(__Method_GetEmbeddingsByStatus, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Dressy.ProcessingDatabase.GetEmbeddingsByStatusRequest, global::Dressy.ProcessingDatabase.GetEmbeddingsByStatusResponse>(serviceImpl.GetEmbeddingsByStatus));
      serviceBinder.AddMethod(__Method_GetRecordById, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Dressy.ProcessingDatabase.GetRecordByIdRequest, global::Dressy.ProcessingDatabase.GetRecordByIdResponse>(serviceImpl.GetRecordById));
      serviceBinder.AddMethod(__Method_UpdateRecordById, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Dressy.ProcessingDatabase.UpdateRecordByIdRequest, global::Dressy.ProcessingDatabase.UpdateRecordByIdResponse>(serviceImpl.UpdateRecordById));
      serviceBinder.AddMethod(__Method_Authentication, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Dressy.ProcessingDatabase.AuthenticationRequest, global::Dressy.ProcessingDatabase.AuthenticationResponse>(serviceImpl.Authentication));
      serviceBinder.AddMethod(__Method_ClearTable, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Dressy.ProcessingDatabase.ClearTableRequest, global::Dressy.ProcessingDatabase.ClearTableResponse>(serviceImpl.ClearTable));
    }

  }
  public static partial class ProcessingDatabaseUsers
  {
    static readonly string __ServiceName = "Dressy.ProcessingDatabase.ProcessingDatabaseUsers";

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Dressy.ProcessingDatabase.GetUserEmbeddingByKeyRequest> __Marshaller_Dressy_ProcessingDatabase_GetUserEmbeddingByKeyRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Dressy.ProcessingDatabase.GetUserEmbeddingByKeyRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Dressy.ProcessingDatabase.GetUserEmbeddingByKeyResponse> __Marshaller_Dressy_ProcessingDatabase_GetUserEmbeddingByKeyResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Dressy.ProcessingDatabase.GetUserEmbeddingByKeyResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Dressy.ProcessingDatabase.IsRecordViewedByUserRequest> __Marshaller_Dressy_ProcessingDatabase_IsRecordViewedByUserRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Dressy.ProcessingDatabase.IsRecordViewedByUserRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Dressy.ProcessingDatabase.IsRecordViewedByUserResponse> __Marshaller_Dressy_ProcessingDatabase_IsRecordViewedByUserResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Dressy.ProcessingDatabase.IsRecordViewedByUserResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Dressy.ProcessingDatabase.AddViewedRecordToUserRequest> __Marshaller_Dressy_ProcessingDatabase_AddViewedRecordToUserRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Dressy.ProcessingDatabase.AddViewedRecordToUserRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Dressy.ProcessingDatabase.AddViewedRecordToUserResponse> __Marshaller_Dressy_ProcessingDatabase_AddViewedRecordToUserResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Dressy.ProcessingDatabase.AddViewedRecordToUserResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Dressy.ProcessingDatabase.DeleteUserByIdRequest> __Marshaller_Dressy_ProcessingDatabase_DeleteUserByIdRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Dressy.ProcessingDatabase.DeleteUserByIdRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Dressy.ProcessingDatabase.DeleteUserByIdResponse> __Marshaller_Dressy_ProcessingDatabase_DeleteUserByIdResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Dressy.ProcessingDatabase.DeleteUserByIdResponse.Parser));

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Dressy.ProcessingDatabase.GetUserEmbeddingByKeyRequest, global::Dressy.ProcessingDatabase.GetUserEmbeddingByKeyResponse> __Method_GetUserEmbeddingByKey = new grpc::Method<global::Dressy.ProcessingDatabase.GetUserEmbeddingByKeyRequest, global::Dressy.ProcessingDatabase.GetUserEmbeddingByKeyResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetUserEmbeddingByKey",
        __Marshaller_Dressy_ProcessingDatabase_GetUserEmbeddingByKeyRequest,
        __Marshaller_Dressy_ProcessingDatabase_GetUserEmbeddingByKeyResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Dressy.ProcessingDatabase.IsRecordViewedByUserRequest, global::Dressy.ProcessingDatabase.IsRecordViewedByUserResponse> __Method_IsRecordViewedByUser = new grpc::Method<global::Dressy.ProcessingDatabase.IsRecordViewedByUserRequest, global::Dressy.ProcessingDatabase.IsRecordViewedByUserResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "IsRecordViewedByUser",
        __Marshaller_Dressy_ProcessingDatabase_IsRecordViewedByUserRequest,
        __Marshaller_Dressy_ProcessingDatabase_IsRecordViewedByUserResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Dressy.ProcessingDatabase.AddViewedRecordToUserRequest, global::Dressy.ProcessingDatabase.AddViewedRecordToUserResponse> __Method_AddViewedRecordToUser = new grpc::Method<global::Dressy.ProcessingDatabase.AddViewedRecordToUserRequest, global::Dressy.ProcessingDatabase.AddViewedRecordToUserResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "AddViewedRecordToUser",
        __Marshaller_Dressy_ProcessingDatabase_AddViewedRecordToUserRequest,
        __Marshaller_Dressy_ProcessingDatabase_AddViewedRecordToUserResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Dressy.ProcessingDatabase.DeleteUserByIdRequest, global::Dressy.ProcessingDatabase.DeleteUserByIdResponse> __Method_DeleteUserById = new grpc::Method<global::Dressy.ProcessingDatabase.DeleteUserByIdRequest, global::Dressy.ProcessingDatabase.DeleteUserByIdResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteUserById",
        __Marshaller_Dressy_ProcessingDatabase_DeleteUserByIdRequest,
        __Marshaller_Dressy_ProcessingDatabase_DeleteUserByIdResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Dressy.ProcessingDatabase.ProcessingdatabaseReflection.Descriptor.Services[1]; }
    }

    /// <summary>Base class for server-side implementations of ProcessingDatabaseUsers</summary>
    [grpc::BindServiceMethod(typeof(ProcessingDatabaseUsers), "BindService")]
    public abstract partial class ProcessingDatabaseUsersBase
    {
      /// <summary>
      /// Returns user embedding by Key, if requested key is absent then this is a new user, so his Key will be added and the embedding will be generated
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Dressy.ProcessingDatabase.GetUserEmbeddingByKeyResponse> GetUserEmbeddingByKey(global::Dressy.ProcessingDatabase.GetUserEmbeddingByKeyRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Checking whether the user has seen the record or not
      /// ! Returns "true" ONLY if requested user_id and record_id_list is present, and requested record_id is present in record_id_list !
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Dressy.ProcessingDatabase.IsRecordViewedByUserResponse> IsRecordViewedByUser(global::Dressy.ProcessingDatabase.IsRecordViewedByUserRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Adds user viewed record to the table, should be executed on the stage of user reaction processing
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Dressy.ProcessingDatabase.AddViewedRecordToUserResponse> AddViewedRecordToUser(global::Dressy.ProcessingDatabase.AddViewedRecordToUserRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Deleting user data, should be executed when we got a message from backend about user's decision to delete his account
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Dressy.ProcessingDatabase.DeleteUserByIdResponse> DeleteUserById(global::Dressy.ProcessingDatabase.DeleteUserByIdRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for ProcessingDatabaseUsers</summary>
    public partial class ProcessingDatabaseUsersClient : grpc::ClientBase<ProcessingDatabaseUsersClient>
    {
      /// <summary>Creates a new client for ProcessingDatabaseUsers</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public ProcessingDatabaseUsersClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for ProcessingDatabaseUsers that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public ProcessingDatabaseUsersClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected ProcessingDatabaseUsersClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected ProcessingDatabaseUsersClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// Returns user embedding by Key, if requested key is absent then this is a new user, so his Key will be added and the embedding will be generated
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Dressy.ProcessingDatabase.GetUserEmbeddingByKeyResponse GetUserEmbeddingByKey(global::Dressy.ProcessingDatabase.GetUserEmbeddingByKeyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetUserEmbeddingByKey(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns user embedding by Key, if requested key is absent then this is a new user, so his Key will be added and the embedding will be generated
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Dressy.ProcessingDatabase.GetUserEmbeddingByKeyResponse GetUserEmbeddingByKey(global::Dressy.ProcessingDatabase.GetUserEmbeddingByKeyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetUserEmbeddingByKey, null, options, request);
      }
      /// <summary>
      /// Returns user embedding by Key, if requested key is absent then this is a new user, so his Key will be added and the embedding will be generated
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Dressy.ProcessingDatabase.GetUserEmbeddingByKeyResponse> GetUserEmbeddingByKeyAsync(global::Dressy.ProcessingDatabase.GetUserEmbeddingByKeyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetUserEmbeddingByKeyAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns user embedding by Key, if requested key is absent then this is a new user, so his Key will be added and the embedding will be generated
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Dressy.ProcessingDatabase.GetUserEmbeddingByKeyResponse> GetUserEmbeddingByKeyAsync(global::Dressy.ProcessingDatabase.GetUserEmbeddingByKeyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetUserEmbeddingByKey, null, options, request);
      }
      /// <summary>
      /// Checking whether the user has seen the record or not
      /// ! Returns "true" ONLY if requested user_id and record_id_list is present, and requested record_id is present in record_id_list !
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Dressy.ProcessingDatabase.IsRecordViewedByUserResponse IsRecordViewedByUser(global::Dressy.ProcessingDatabase.IsRecordViewedByUserRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return IsRecordViewedByUser(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Checking whether the user has seen the record or not
      /// ! Returns "true" ONLY if requested user_id and record_id_list is present, and requested record_id is present in record_id_list !
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Dressy.ProcessingDatabase.IsRecordViewedByUserResponse IsRecordViewedByUser(global::Dressy.ProcessingDatabase.IsRecordViewedByUserRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_IsRecordViewedByUser, null, options, request);
      }
      /// <summary>
      /// Checking whether the user has seen the record or not
      /// ! Returns "true" ONLY if requested user_id and record_id_list is present, and requested record_id is present in record_id_list !
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Dressy.ProcessingDatabase.IsRecordViewedByUserResponse> IsRecordViewedByUserAsync(global::Dressy.ProcessingDatabase.IsRecordViewedByUserRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return IsRecordViewedByUserAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Checking whether the user has seen the record or not
      /// ! Returns "true" ONLY if requested user_id and record_id_list is present, and requested record_id is present in record_id_list !
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Dressy.ProcessingDatabase.IsRecordViewedByUserResponse> IsRecordViewedByUserAsync(global::Dressy.ProcessingDatabase.IsRecordViewedByUserRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_IsRecordViewedByUser, null, options, request);
      }
      /// <summary>
      /// Adds user viewed record to the table, should be executed on the stage of user reaction processing
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Dressy.ProcessingDatabase.AddViewedRecordToUserResponse AddViewedRecordToUser(global::Dressy.ProcessingDatabase.AddViewedRecordToUserRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AddViewedRecordToUser(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Adds user viewed record to the table, should be executed on the stage of user reaction processing
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Dressy.ProcessingDatabase.AddViewedRecordToUserResponse AddViewedRecordToUser(global::Dressy.ProcessingDatabase.AddViewedRecordToUserRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_AddViewedRecordToUser, null, options, request);
      }
      /// <summary>
      /// Adds user viewed record to the table, should be executed on the stage of user reaction processing
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Dressy.ProcessingDatabase.AddViewedRecordToUserResponse> AddViewedRecordToUserAsync(global::Dressy.ProcessingDatabase.AddViewedRecordToUserRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AddViewedRecordToUserAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Adds user viewed record to the table, should be executed on the stage of user reaction processing
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Dressy.ProcessingDatabase.AddViewedRecordToUserResponse> AddViewedRecordToUserAsync(global::Dressy.ProcessingDatabase.AddViewedRecordToUserRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_AddViewedRecordToUser, null, options, request);
      }
      /// <summary>
      /// Deleting user data, should be executed when we got a message from backend about user's decision to delete his account
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Dressy.ProcessingDatabase.DeleteUserByIdResponse DeleteUserById(global::Dressy.ProcessingDatabase.DeleteUserByIdRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteUserById(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deleting user data, should be executed when we got a message from backend about user's decision to delete his account
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Dressy.ProcessingDatabase.DeleteUserByIdResponse DeleteUserById(global::Dressy.ProcessingDatabase.DeleteUserByIdRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteUserById, null, options, request);
      }
      /// <summary>
      /// Deleting user data, should be executed when we got a message from backend about user's decision to delete his account
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Dressy.ProcessingDatabase.DeleteUserByIdResponse> DeleteUserByIdAsync(global::Dressy.ProcessingDatabase.DeleteUserByIdRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteUserByIdAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deleting user data, should be executed when we got a message from backend about user's decision to delete his account
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Dressy.ProcessingDatabase.DeleteUserByIdResponse> DeleteUserByIdAsync(global::Dressy.ProcessingDatabase.DeleteUserByIdRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteUserById, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected override ProcessingDatabaseUsersClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new ProcessingDatabaseUsersClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static grpc::ServerServiceDefinition BindService(ProcessingDatabaseUsersBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_GetUserEmbeddingByKey, serviceImpl.GetUserEmbeddingByKey)
          .AddMethod(__Method_IsRecordViewedByUser, serviceImpl.IsRecordViewedByUser)
          .AddMethod(__Method_AddViewedRecordToUser, serviceImpl.AddViewedRecordToUser)
          .AddMethod(__Method_DeleteUserById, serviceImpl.DeleteUserById).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static void BindService(grpc::ServiceBinderBase serviceBinder, ProcessingDatabaseUsersBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_GetUserEmbeddingByKey, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Dressy.ProcessingDatabase.GetUserEmbeddingByKeyRequest, global::Dressy.ProcessingDatabase.GetUserEmbeddingByKeyResponse>(serviceImpl.GetUserEmbeddingByKey));
      serviceBinder.AddMethod(__Method_IsRecordViewedByUser, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Dressy.ProcessingDatabase.IsRecordViewedByUserRequest, global::Dressy.ProcessingDatabase.IsRecordViewedByUserResponse>(serviceImpl.IsRecordViewedByUser));
      serviceBinder.AddMethod(__Method_AddViewedRecordToUser, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Dressy.ProcessingDatabase.AddViewedRecordToUserRequest, global::Dressy.ProcessingDatabase.AddViewedRecordToUserResponse>(serviceImpl.AddViewedRecordToUser));
      serviceBinder.AddMethod(__Method_DeleteUserById, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Dressy.ProcessingDatabase.DeleteUserByIdRequest, global::Dressy.ProcessingDatabase.DeleteUserByIdResponse>(serviceImpl.DeleteUserById));
    }

  }
}
#endregion
